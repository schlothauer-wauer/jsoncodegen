<%
def targetNameSpace = extraParam.targetNamespace ? extraParam.targetNamespace : 'http://please.change.org/use/targetNamespace/generator/param/1.0'

def printOccurs = { propType ->
    if (propType.isArray) {
        return ' minOccurs="0" maxOccurs="unbounded"'
    }
    else {
        return ''
    }
}

def typeConvert = { type ->
    if (! type instanceof de.lisaplus.atlas.model.BaseType) {
        return BaseType.WRONG_TYPE+type
    }
    switch(type.name()) {
        case de.lisaplus.atlas.model.IntType.NAME:
            return 'xsd:integer'
        case de.lisaplus.atlas.model.LongType.NAME:
            return 'xsd:long'
        case de.lisaplus.atlas.model.NumberType.NAME:
            return 'xsd:double'
        case de.lisaplus.atlas.model.StringType.NAME:
            return 'xsd:string'
        case de.lisaplus.atlas.model.UUIDType.NAME:
            return 'Guid'
        case de.lisaplus.atlas.model.BooleanType.NAME:
            return 'xsd:boolean'
        case de.lisaplus.atlas.model.ByteType.NAME:
            return 'xsd:byte'
        case de.lisaplus.atlas.model.DateType.NAME:
            return 'xsd:date'
        case de.lisaplus.atlas.model.DateTimeType.NAME:
            return 'xsd:dateTime'
        case de.lisaplus.atlas.model.RefType.NAME:
            return type.type.name
        case de.lisaplus.atlas.model.ComplexType.NAME: // ?
            return type.type.name
        case de.lisaplus.atlas.model.UnsupportedType.NAME:
            return "Unsupported"
        default:
            return "???"
    }
}

def hasUnsupportedType = model.types.find { type ->
    type.properties.find { prop ->
        prop.type instanceof de.lisaplus.atlas.model.UnsupportedType
    } != null
}

def hasGuidType = model.types.find { type ->
   type.properties.find { prop ->
        prop.type instanceof de.lisaplus.atlas.model.UUIDType
   } != null
}

%><xsd:schema
        xmlns:xsd="http://www.w3.org/2001/XMLSchema"
        targetNamespace="${targetNameSpace}"
        xmlns="${targetNameSpace}"
        elementFormDefault="qualified" xml:lang="en">
    <!-- generated by jsonCodeGen -->
    <% if (hasUnsupportedType) {
    %><xsd:complexType name="Unsupported">
        <xsd:sequence/>
    </xsd:complexType>
    <% } %>
    <% if (hasGuidType) {
    %><xsd:simpleType name="Guid">
         <xsd:restriction base="xsd:string">
             <xsd:pattern value="[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}" />
         </xsd:restriction>
     </xsd:simpleType>
    <% } %>

    <% model.types.each  { type ->
    %><xsd:complexType name="${type.name}">
        <% if (type.description) {
        %><xsd:annotation>
            <xsd:documentation>${type.description}</xsd:documentation>
        </xsd:annotation>
        <% } %>
        <xsd:sequence>
            <% type.properties.each { prop ->
            %><xsd:element name="${prop.name}" type="${ typeConvert.call(prop.type) }"${printOccurs(prop.type)}>
                <% if (prop.description) {
                %><xsd:annotation>
                    <xsd:documentation>${prop.description}</xsd:documentation>
                </xsd:annotation>
                <% } %>
            </xsd:element>
            <% } %>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="${lowerCamelCase.call(type.name)}" type="${type.name}"/>
    <% } %>
</xsd:schema>