package ${extraParam.packageName};

<% if ( currentType.description ) { %>
/**
 * ${currentType.description}
 */
<% }
// def isTypeEnum = currentType.isEnum
// println "isTypeEnum $isTypeEnum to ${currentType.name}"
if (currentType.isEnum) {
%>public enum ${ upperCamelCase.call(currentType.name) } {
    <% boolean first=true; currentType.allowedValues.each { value ->
    if (first) {%>
    ${value}
    <% first=false} else { %>
    ,${value}
    <% } } %>
}
<% } else {
%>
public interface I${ firstUpperCase.call(currentType.name) } {
    <% currentType.properties.each { prop -> %>
    <% if (prop.description) { %>
    /**
     * ${prop.description}
     */
    <% } %>
    <%
    def isEnum = false
    if(prop.isRefTypeOrComplexType()) {
       isEnum = (prop.type.type.isEnum)
       //println "${prop.type.type} with name ${prop.name} isEnum $isEnum"
    }
    if (isEnum) {
    %>
    public ${ typeToJava.call(prop.type) } get${ firstUpperCase.call(prop.name) } ();
    public void set${ firstUpperCase.call(prop.name) } (${ typeToJava.call(prop.type) } ${prop.name});
    <% } else { %>
     public ${ typeToJava.call(prop.type,'I') } get${ firstUpperCase.call(prop.name) } ();
    public void set${ firstUpperCase.call(prop.name) } (${ typeToJava.call(prop.type,'I') } ${prop.name});
    <% } %>
    <% } %>
}
<% } %>
