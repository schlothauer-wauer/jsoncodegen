<%
boolean versionConst = extraParam.versionConst

def memberVisibility = extraParam.memberVisibility && extraParam.memberVisibility.toLowerCase()=='protected' ? 'protected' : 'private'
def hasUuid = !currentType.properties.findAll { it.type.name() == 'UUID'}.isEmpty()
def importStr = hasUuid ? '\nimport java.util.UUID;\n' : ''

%>package ${extraParam.packageName};
${importStr}
// This class is generated by the jsonCodeGen bean template (bean.txt), changes have to implement there

<% if ( currentType.description ) { %>
/**
 * ${currentType.description}
 */
<% }
if (currentType.isEnum) {
%>public enum ${ upperCamelCase.call(currentType.name) } {
    <% boolean first=true; currentType.allowedValues.each { value ->
    if (first) {%>
    ${value}
    <% first=false} else { %>
    ,${value}
    <% } } %>
}
<% } else {
%>public class ${ upperCamelCase.call(currentType.name) } {
    <% if (versionConst) {
    %>
    /**
     * Resulting from the model description
     */
    public final static int TYPE_VERSION=${currentType.version};

    /**
     * Version information for a concrete object. It can differ from model type version f.e. in
     * case of deserialization from message broker content
     */
    private Integer _objectVersion=${currentType.version};

    public void set_objectVersion(Integer version) {
        this._objectVersion = version;
    }

    public Integer get_objectVersion() {
        return this._objectVersion;
    }

    <% } %>
    <% currentType.properties.each { prop -> %>
    <% if (prop.description) {
    %>/**
     * ${prop.description}
     */
    <% }
    if (!prop.type.isArray) {
    %>${memberVisibility} ${ typeToJava.call(prop.type) } ${prop.name};
    <% } else {
    %>${memberVisibility} ${ typeToJava.call(prop.type) } ${prop.name} = new java.util.ArrayList<>();
    <% }
    %>
    public ${ typeToJava.call(prop.type) } get${ firstUpperCase.call(prop.name) } () { return this.${prop.name}; }

    public void set${ firstUpperCase.call(prop.name) } (${ typeToJava.call(prop.type) } ${prop.name}) {
        <% if (!prop.type.isArray) {
        %>this.${prop.name} = ${prop.name};
        <% } else {
        %>this.${prop.name} = ${prop.name}!=null ? ${prop.name} : new java.util.ArrayList<>();
        <% }
        %>
    }

    <% } %>

    @Override
    public boolean equals(Object obj) {
        if (obj==null) return false;
        if ( ! (obj instanceof ${ upperCamelCase.call(currentType.name) })) return false;

        ${ upperCamelCase.call(currentType.name) } _typeInst = (${ upperCamelCase.call(currentType.name) }) obj;
       // handling of non-array-types
    <% currentType.properties.findAll{ prop -> ! prop.type.isArray }.each { prop -> %>
        ${ typeToJava.call(prop.type) } _${prop.name} = _typeInst.get${ firstUpperCase.call(prop.name) } ();
        if (this.${prop.name} == null && _${prop.name} != null) return false;
        if (this.${prop.name} != null) {
            if (!this.${prop.name}.equals(_${prop.name})) return false;
        }
    <% } %>
       // handling of array-types
    <% currentType.properties.findAll{ prop -> prop.type.isArray }.each { prop -> %>
        ${ typeToJava.call(prop.type) } _${prop.name} = _typeInst.get${ firstUpperCase.call(prop.name) } ();
        if (this.${prop.name} == null && (_${prop.name} != null && _${prop.name}.size()>0)) return false;
        if (this.${prop.name} != null && this.${prop.name}.size()>0) {
            if (!this.${prop.name}.equals(_${prop.name})) return false;
        }
    <% } %>
        return true;
    }

}
<% } %>